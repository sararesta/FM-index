
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "FMIndex"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('FMIndex')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("computeFMIndex")
> ### * computeFMIndex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: computeFMIndex
> ### Title: Writes the FM index
> ### Aliases: computeFMIndex
> 
> ### ** Examples
> 
> computeFMIndex(system.file("extdata/seq5.fasta",package="FMIndex"),"")
$F_column
 .  A  C  G  T 
 1 56 56 57 71 

$L_column
241-letter DNAString object
seq: AGTTGACATTGTATATTGGCGAACCTACCATAG.AC...TGGTCCCAAGCCTCGGCCGTACACTTTGCGGCCGGG

$tally_table
        A  C  G  T
  [1,]  1  0  0  0
  [2,]  1  0  1  0
  [3,]  1  0  1  1
  [4,]  1  0  1  2
  [5,]  1  0  2  2
  [6,]  2  0  2  2
  [7,]  2  1  2  2
  [8,]  3  1  2  2
  [9,]  3  1  2  3
 [10,]  3  1  2  4
 [11,]  3  1  3  4
 [12,]  3  1  3  5
 [13,]  4  1  3  5
 [14,]  4  1  3  6
 [15,]  5  1  3  6
 [16,]  5  1  3  7
 [17,]  5  1  3  8
 [18,]  5  1  4  8
 [19,]  5  1  5  8
 [20,]  5  2  5  8
 [21,]  5  2  6  8
 [22,]  6  2  6  8
 [23,]  7  2  6  8
 [24,]  7  3  6  8
 [25,]  7  4  6  8
 [26,]  7  4  6  9
 [27,]  8  4  6  9
 [28,]  8  5  6  9
 [29,]  8  6  6  9
 [30,]  9  6  6  9
 [31,]  9  6  6 10
 [32,] 10  6  6 10
 [33,] 10  6  7 10
 [34,] 10  6  7 10
 [35,] 11  6  7 10
 [36,] 11  7  7 10
 [37,] 11  8  7 10
 [38,] 11  8  8 10
 [39,] 11  9  8 10
 [40,] 11 10  8 10
 [41,] 12 10  8 10
 [42,] 12 10  8 11
 [43,] 12 10  9 11
 [44,] 12 11  9 11
 [45,] 12 11  9 12
 [46,] 13 11  9 12
 [47,] 13 11  9 13
 [48,] 13 12  9 13
 [49,] 13 12 10 13
 [50,] 13 13 10 13
 [51,] 14 13 10 13
 [52,] 14 13 11 13
 [53,] 14 13 11 14
 [54,] 14 14 11 14
 [55,] 14 14 12 14
 [56,] 15 14 12 14
 [57,] 16 14 12 14
 [58,] 16 14 12 15
 [59,] 16 14 13 15
 [60,] 17 14 13 15
 [61,] 17 14 13 16
 [62,] 17 14 14 16
 [63,] 17 14 14 17
 [64,] 17 14 14 18
 [65,] 17 14 15 18
 [66,] 18 14 15 18
 [67,] 18 14 16 18
 [68,] 18 14 17 18
 [69,] 18 14 17 19
 [70,] 19 14 17 19
 [71,] 19 14 18 19
 [72,] 19 14 18 20
 [73,] 20 14 18 20
 [74,] 20 14 19 20
 [75,] 20 14 19 21
 [76,] 20 14 19 22
 [77,] 20 15 19 22
 [78,] 20 15 20 22
 [79,] 21 15 20 22
 [80,] 21 16 20 22
 [81,] 22 16 20 22
 [82,] 23 16 20 22
 [83,] 23 17 20 22
 [84,] 24 17 20 22
 [85,] 24 17 20 23
 [86,] 24 18 20 23
 [87,] 25 18 20 23
 [88,] 25 18 20 24
 [89,] 25 18 20 25
 [90,] 25 18 20 26
 [91,] 25 19 20 26
 [92,] 25 19 20 27
 [93,] 25 19 20 28
 [94,] 26 19 20 28
 [95,] 26 19 20 29
 [96,] 26 19 20 30
 [97,] 27 19 20 30
 [98,] 28 19 20 30
 [99,] 29 19 20 30
[100,] 29 19 20 31
[101,] 29 19 20 32
[102,] 29 19 21 32
[103,] 29 19 22 32
[104,] 29 20 22 32
[105,] 29 20 23 32
[106,] 30 20 23 32
[107,] 30 20 23 33
[108,] 30 20 23 34
[109,] 30 20 24 34
[110,] 30 20 25 34
[111,] 30 20 25 35
[112,] 30 21 25 35
[113,] 31 21 25 35
[114,] 31 22 25 35
[115,] 31 23 25 35
[116,] 31 24 25 35
[117,] 31 24 26 35
[118,] 31 24 26 36
[119,] 31 24 26 37
[120,] 31 24 27 37
[121,] 32 24 27 37
[122,] 32 25 27 37
[123,] 32 26 27 37
[124,] 33 26 27 37
[125,] 34 26 27 37
[126,] 35 26 27 37
[127,] 35 26 27 38
[128,] 35 26 27 39
[129,] 35 26 27 40
[130,] 35 27 27 40
[131,] 35 27 27 41
[132,] 36 27 27 41
[133,] 37 27 27 41
[134,] 37 27 28 41
[135,] 37 27 29 41
[136,] 37 27 30 41
[137,] 37 27 30 42
[138,] 37 27 30 43
[139,] 38 27 30 43
[140,] 38 27 30 44
[141,] 38 28 30 44
[142,] 39 28 30 44
[143,] 39 28 30 45
[144,] 39 29 30 45
[145,] 40 29 30 45
[146,] 40 29 31 45
[147,] 40 29 31 46
[148,] 41 29 31 46
[149,] 41 30 31 46
[150,] 42 30 31 46
[151,] 42 30 32 46
[152,] 43 30 32 46
[153,] 43 30 32 47
[154,] 43 30 32 48
[155,] 43 31 32 48
[156,] 43 32 32 48
[157,] 43 32 32 49
[158,] 43 33 32 49
[159,] 43 33 32 50
[160,] 44 33 32 50
[161,] 44 33 32 51
[162,] 44 33 33 51
[163,] 44 33 33 52
[164,] 44 34 33 52
[165,] 44 34 33 53
[166,] 44 35 33 53
[167,] 44 35 33 54
[168,] 44 35 34 54
[169,] 44 35 35 54
[170,] 44 35 36 54
[171,] 44 35 36 55
[172,] 44 36 36 55
[173,] 45 36 36 55
[174,] 45 36 37 55
[175,] 45 36 38 55
[176,] 45 36 38 56
[177,] 46 36 38 56
[178,] 46 37 38 56
[179,] 46 37 38 57
[180,] 46 37 38 58
[181,] 46 38 38 58
[182,] 46 38 38 59
[183,] 46 38 39 59
[184,] 46 39 39 59
[185,] 46 39 39 60
[186,] 46 40 39 60
[187,] 46 40 40 60
[188,] 47 40 40 60
[189,] 48 40 40 60
[190,] 48 40 41 60
[191,] 48 40 42 60
[192,] 48 40 43 60
[193,] 48 41 43 60
[194,] 48 41 43 61
[195,] 48 41 43 62
[196,] 48 42 43 62
[197,] 48 42 44 62
[198,] 48 43 44 62
[199,] 49 43 44 62
[200,] 49 43 45 62
[201,] 49 43 45 63
[202,] 49 43 45 64
[203,] 50 43 45 64
[204,] 51 43 45 64
[205,] 52 43 45 64
[206,] 52 43 45 65
[207,] 52 43 46 65
[208,] 52 43 47 65
[209,] 52 43 47 66
[210,] 52 44 47 66
[211,] 52 45 47 66
[212,] 52 46 47 66
[213,] 53 46 47 66
[214,] 54 46 47 66
[215,] 54 46 48 66
[216,] 54 47 48 66
[217,] 54 48 48 66
[218,] 54 48 48 67
[219,] 54 49 48 67
[220,] 54 49 49 67
[221,] 54 49 50 67
[222,] 54 50 50 67
[223,] 54 51 50 67
[224,] 54 51 51 67
[225,] 54 51 51 68
[226,] 55 51 51 68
[227,] 55 52 51 68
[228,] 56 52 51 68
[229,] 56 53 51 68
[230,] 56 53 51 69
[231,] 56 53 51 70
[232,] 56 53 51 71
[233,] 56 53 52 71
[234,] 56 54 52 71
[235,] 56 54 53 71
[236,] 56 54 54 71
[237,] 56 55 54 71
[238,] 56 56 54 71
[239,] 56 56 55 71
[240,] 56 56 56 71
[241,] 56 56 57 71

> computeFMIndex(system.file("extdata/seq5.fasta",package="FMIndex"),"",tallywidth=1)
$F_column
 .  A  C  G  T 
 1 56 56 57 71 

$L_column
241-letter DNAString object
seq: AGTTGACATTGTATATTGGCGAACCTACCATAG.AC...TGGTCCCAAGCCTCGGCCGTACACTTTGCGGCCGGG

$tally_table
        A  C  G  T
  [1,]  1  0  0  0
  [2,]  1  0  1  0
  [3,]  1  0  1  1
  [4,]  1  0  1  2
  [5,]  1  0  2  2
  [6,]  2  0  2  2
  [7,]  2  1  2  2
  [8,]  3  1  2  2
  [9,]  3  1  2  3
 [10,]  3  1  2  4
 [11,]  3  1  3  4
 [12,]  3  1  3  5
 [13,]  4  1  3  5
 [14,]  4  1  3  6
 [15,]  5  1  3  6
 [16,]  5  1  3  7
 [17,]  5  1  3  8
 [18,]  5  1  4  8
 [19,]  5  1  5  8
 [20,]  5  2  5  8
 [21,]  5  2  6  8
 [22,]  6  2  6  8
 [23,]  7  2  6  8
 [24,]  7  3  6  8
 [25,]  7  4  6  8
 [26,]  7  4  6  9
 [27,]  8  4  6  9
 [28,]  8  5  6  9
 [29,]  8  6  6  9
 [30,]  9  6  6  9
 [31,]  9  6  6 10
 [32,] 10  6  6 10
 [33,] 10  6  7 10
 [34,] 10  6  7 10
 [35,] 11  6  7 10
 [36,] 11  7  7 10
 [37,] 11  8  7 10
 [38,] 11  8  8 10
 [39,] 11  9  8 10
 [40,] 11 10  8 10
 [41,] 12 10  8 10
 [42,] 12 10  8 11
 [43,] 12 10  9 11
 [44,] 12 11  9 11
 [45,] 12 11  9 12
 [46,] 13 11  9 12
 [47,] 13 11  9 13
 [48,] 13 12  9 13
 [49,] 13 12 10 13
 [50,] 13 13 10 13
 [51,] 14 13 10 13
 [52,] 14 13 11 13
 [53,] 14 13 11 14
 [54,] 14 14 11 14
 [55,] 14 14 12 14
 [56,] 15 14 12 14
 [57,] 16 14 12 14
 [58,] 16 14 12 15
 [59,] 16 14 13 15
 [60,] 17 14 13 15
 [61,] 17 14 13 16
 [62,] 17 14 14 16
 [63,] 17 14 14 17
 [64,] 17 14 14 18
 [65,] 17 14 15 18
 [66,] 18 14 15 18
 [67,] 18 14 16 18
 [68,] 18 14 17 18
 [69,] 18 14 17 19
 [70,] 19 14 17 19
 [71,] 19 14 18 19
 [72,] 19 14 18 20
 [73,] 20 14 18 20
 [74,] 20 14 19 20
 [75,] 20 14 19 21
 [76,] 20 14 19 22
 [77,] 20 15 19 22
 [78,] 20 15 20 22
 [79,] 21 15 20 22
 [80,] 21 16 20 22
 [81,] 22 16 20 22
 [82,] 23 16 20 22
 [83,] 23 17 20 22
 [84,] 24 17 20 22
 [85,] 24 17 20 23
 [86,] 24 18 20 23
 [87,] 25 18 20 23
 [88,] 25 18 20 24
 [89,] 25 18 20 25
 [90,] 25 18 20 26
 [91,] 25 19 20 26
 [92,] 25 19 20 27
 [93,] 25 19 20 28
 [94,] 26 19 20 28
 [95,] 26 19 20 29
 [96,] 26 19 20 30
 [97,] 27 19 20 30
 [98,] 28 19 20 30
 [99,] 29 19 20 30
[100,] 29 19 20 31
[101,] 29 19 20 32
[102,] 29 19 21 32
[103,] 29 19 22 32
[104,] 29 20 22 32
[105,] 29 20 23 32
[106,] 30 20 23 32
[107,] 30 20 23 33
[108,] 30 20 23 34
[109,] 30 20 24 34
[110,] 30 20 25 34
[111,] 30 20 25 35
[112,] 30 21 25 35
[113,] 31 21 25 35
[114,] 31 22 25 35
[115,] 31 23 25 35
[116,] 31 24 25 35
[117,] 31 24 26 35
[118,] 31 24 26 36
[119,] 31 24 26 37
[120,] 31 24 27 37
[121,] 32 24 27 37
[122,] 32 25 27 37
[123,] 32 26 27 37
[124,] 33 26 27 37
[125,] 34 26 27 37
[126,] 35 26 27 37
[127,] 35 26 27 38
[128,] 35 26 27 39
[129,] 35 26 27 40
[130,] 35 27 27 40
[131,] 35 27 27 41
[132,] 36 27 27 41
[133,] 37 27 27 41
[134,] 37 27 28 41
[135,] 37 27 29 41
[136,] 37 27 30 41
[137,] 37 27 30 42
[138,] 37 27 30 43
[139,] 38 27 30 43
[140,] 38 27 30 44
[141,] 38 28 30 44
[142,] 39 28 30 44
[143,] 39 28 30 45
[144,] 39 29 30 45
[145,] 40 29 30 45
[146,] 40 29 31 45
[147,] 40 29 31 46
[148,] 41 29 31 46
[149,] 41 30 31 46
[150,] 42 30 31 46
[151,] 42 30 32 46
[152,] 43 30 32 46
[153,] 43 30 32 47
[154,] 43 30 32 48
[155,] 43 31 32 48
[156,] 43 32 32 48
[157,] 43 32 32 49
[158,] 43 33 32 49
[159,] 43 33 32 50
[160,] 44 33 32 50
[161,] 44 33 32 51
[162,] 44 33 33 51
[163,] 44 33 33 52
[164,] 44 34 33 52
[165,] 44 34 33 53
[166,] 44 35 33 53
[167,] 44 35 33 54
[168,] 44 35 34 54
[169,] 44 35 35 54
[170,] 44 35 36 54
[171,] 44 35 36 55
[172,] 44 36 36 55
[173,] 45 36 36 55
[174,] 45 36 37 55
[175,] 45 36 38 55
[176,] 45 36 38 56
[177,] 46 36 38 56
[178,] 46 37 38 56
[179,] 46 37 38 57
[180,] 46 37 38 58
[181,] 46 38 38 58
[182,] 46 38 38 59
[183,] 46 38 39 59
[184,] 46 39 39 59
[185,] 46 39 39 60
[186,] 46 40 39 60
[187,] 46 40 40 60
[188,] 47 40 40 60
[189,] 48 40 40 60
[190,] 48 40 41 60
[191,] 48 40 42 60
[192,] 48 40 43 60
[193,] 48 41 43 60
[194,] 48 41 43 61
[195,] 48 41 43 62
[196,] 48 42 43 62
[197,] 48 42 44 62
[198,] 48 43 44 62
[199,] 49 43 44 62
[200,] 49 43 45 62
[201,] 49 43 45 63
[202,] 49 43 45 64
[203,] 50 43 45 64
[204,] 51 43 45 64
[205,] 52 43 45 64
[206,] 52 43 45 65
[207,] 52 43 46 65
[208,] 52 43 47 65
[209,] 52 43 47 66
[210,] 52 44 47 66
[211,] 52 45 47 66
[212,] 52 46 47 66
[213,] 53 46 47 66
[214,] 54 46 47 66
[215,] 54 46 48 66
[216,] 54 47 48 66
[217,] 54 48 48 66
[218,] 54 48 48 67
[219,] 54 49 48 67
[220,] 54 49 49 67
[221,] 54 49 50 67
[222,] 54 50 50 67
[223,] 54 51 50 67
[224,] 54 51 51 67
[225,] 54 51 51 68
[226,] 55 51 51 68
[227,] 55 52 51 68
[228,] 56 52 51 68
[229,] 56 53 51 68
[230,] 56 53 51 69
[231,] 56 53 51 70
[232,] 56 53 51 71
[233,] 56 53 52 71
[234,] 56 54 52 71
[235,] 56 54 53 71
[236,] 56 54 54 71
[237,] 56 55 54 71
[238,] 56 56 54 71
[239,] 56 56 55 71
[240,] 56 56 56 71
[241,] 56 56 57 71

> 
> 
> 
> cleanEx()
> nameEx("getFcolumn")
> ### * getFcolumn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getFcolumn
> ### Title: Compute the F column
> ### Aliases: getFcolumn
> 
> ### ** Examples
> 
> library(Biostrings)
Loading required package: BiocGenerics

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colnames, dirname, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin,
    pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table,
    tapply, union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:base’:

    I, expand.grid, unname

Loading required package: IRanges
Loading required package: XVector
Loading required package: GenomeInfoDb

Attaching package: ‘Biostrings’

The following object is masked from ‘package:base’:

    strsplit

> getFcolumn(DNAString("ACCT"))
. A C T 
1 1 2 1 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Biostrings’, ‘package:GenomeInfoDb’,
  ‘package:XVector’, ‘package:IRanges’, ‘package:S4Vectors’,
  ‘package:stats4’, ‘package:BiocGenerics’

> nameEx("getLcolumn")
> ### * getLcolumn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getLcolumn
> ### Title: Compute the L column of a sequence
> ### Aliases: getLcolumn
> 
> ### ** Examples
> 
> library(Biostrings)
Loading required package: BiocGenerics

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colnames, dirname, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin,
    pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table,
    tapply, union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:base’:

    I, expand.grid, unname

Loading required package: IRanges
Loading required package: XVector
Loading required package: GenomeInfoDb

Attaching package: ‘Biostrings’

The following object is masked from ‘package:base’:

    strsplit

> getLcolumn(DNAString("ACGT"))
5-letter DNAString object
seq: T.ACG
> getLcolumn(DNAString("AACCGT"))
7-letter DNAString object
seq: T.AACCG
> 
> 
> 
> cleanEx()

detaching ‘package:Biostrings’, ‘package:GenomeInfoDb’,
  ‘package:XVector’, ‘package:IRanges’, ‘package:S4Vectors’,
  ‘package:stats4’, ‘package:BiocGenerics’

> nameEx("getTallyTable")
> ### * getTallyTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getTallyTable
> ### Title: Create the Tally Table
> ### Aliases: getTallyTable
> 
> ### ** Examples
> 
> library(Biostrings)
Loading required package: BiocGenerics

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colnames, dirname, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin,
    pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table,
    tapply, union, unique, unsplit, which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:base’:

    I, expand.grid, unname

Loading required package: IRanges
Loading required package: XVector
Loading required package: GenomeInfoDb

Attaching package: ‘Biostrings’

The following object is masked from ‘package:base’:

    strsplit

> getTallyTable(DNAString("T.AACCG"))
     A C G T
[1,] 0 0 0 1
[2,] 0 0 0 1
[3,] 1 0 0 1
[4,] 2 0 0 1
[5,] 2 1 0 1
[6,] 2 2 0 1
[7,] 2 2 1 1
> getTallyTable(DNAString("T.AACCG"),2)
     A C G T
[1,] 0 0 0 1
[2,] 1 0 0 1
[3,] 2 1 0 1
[4,] 2 2 1 1
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:Biostrings’, ‘package:GenomeInfoDb’,
  ‘package:XVector’, ‘package:IRanges’, ‘package:S4Vectors’,
  ‘package:stats4’, ‘package:BiocGenerics’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.338 0.218 3.321 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
