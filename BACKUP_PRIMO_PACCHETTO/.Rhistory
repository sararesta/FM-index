tally.table <- getTallyTable(l.col,tallywidth)
f.col.filepath <- paste(usrpath,"F_col.txt",collapse="",sep="")
l.col.filepath <- paste(usrpath,"L_col.txt",collapse="",sep="")
SA.filepath <- paste(usrpath,"suffix_array.txt",collapse="",sep="")
tally.table.filepath <- paste(usrpath,"tally_table.txt",collapse="",sep="")
FM <- list(f.col,l.col,SA,tally.table)
names(FM) <- c("F_column","L_column","suffix_array","tally_table")
write.table(t(as.matrix(f.col)), file = f.col.filepath, sep = "\t",
row.names = FALSE)
write(as.character(l.col),file=l.col.filepath)
write(SA,file=SA.filepath)
write.table(tally.table, file = tally.table.filepath,
sep = "\t", row.names = FALSE,col.names = TRUE)
return(FM)
}
FMindex(system.file("extdata/examples/seq5.fasta",package="FMIndex"),"")
#'
#' Writes the FM index
#'
#' This function writes the FM index of the DNA sequence contained in the
#' .fasta file given in input
#'
#' @param fastafile The .fasta file containing one single DNA sequence,
#' files containing multiple sequences are not allowed
#' @param usrpath The directory path where the user wants to save the files:
#' it must end with '/' (you can leave it empty if you want to save the files
#' in your working directory).
#' @param tallywidth How you want to compress the tally table. Default value=1
#' @param includeEndChar default value: true
#' @return A list containint all the data structures necessary for the FM index
#' @examples
#' FMindex(system.file("extdata/examples/seq5.fasta",package="FMIndex"),"")
#' FMindex(system.file(
#' "extdata/examples/seq5.fasta",package="FMIndex"),"",tallywidth=1)
#' @export
#' @importFrom Biostrings readDNAStringSet
#' @importFrom utils write.table
FMindex <- function(fastafile,usrpath,tallywidth=1,includeEndChar=TRUE){
seqset <- Biostrings::readDNAStringSet(fastafile,use.names=FALSE)
sequence <- unlist(seqset)
f.col <- getFcolumn(unlist(sequence))
res.list <- getLcolumn(sequence)
l.col <- res.list["bwt"]
SA <- res.list["suffix_array"]
tally.table <- getTallyTable(l.col,tallywidth)
f.col.filepath <- paste(usrpath,"F_col.txt",collapse="",sep="")
l.col.filepath <- paste(usrpath,"L_col.txt",collapse="",sep="")
SA.filepath <- paste(usrpath,"suffix_array.txt",collapse="",sep="")
tally.table.filepath <- paste(usrpath,"tally_table.txt",collapse="",sep="")
FM <- list(f.col,l.col,SA,tally.table)
names(FM) <- c("F_column","L_column","suffix_array","tally_table")
write.table(t(as.matrix(f.col)), file = f.col.filepath, sep = "\t",
row.names = FALSE)
write(as.character(l.col),file=l.col.filepath)
write(SA,file=SA.filepath)
write.table(tally.table, file = tally.table.filepath,
sep = "\t", row.names = FALSE,col.names = TRUE)
return(FM)
}
FMindex(system.file("extdata/examples/seq5.fasta",package="FMIndex"),"")
setwd("C:/Users/sarar/Documents/CORSI/SCIENTIFIC_PROGRAMMING/PROJECT/FM-versioni/BACKUP_PRIMO_PACCHETTO/FMIndex")
setwd("C:/Users/sarar/Documents/CORSI/SCIENTIFIC_PROGRAMMING/PROJECT/FM-versioni/BACKUP_PRIMO_PACCHETTO/FMIndex")
FMindex(system.file("extdata/examples/seq5.fasta",package="FMIndex"),"")
FMindex(system.file("inst/examples/seq5.fasta",package="FMIndex"),"")
setwd("~/CORSI/SCIENTIFIC_PROGRAMMING/PROJECT/FM-versioni/BACKUP_PRIMO_PACCHETTO/FMIndex/R")
setwd("~/CORSI/SCIENTIFIC_PROGRAMMING/PROJECT/FM-versioni/BACKUP_PRIMO_PACCHETTO/FMIndex")
FMindex("seq5.fasta","")
FMindex("seq5.fasta")
FMindex("seq5.fasta","")
getwd()
setwd("~/CORSI/SCIENTIFIC_PROGRAMMING/PROJECT/FM-versioni/BACKUP_PRIMO_PACCHETTO/")
FMindex("seq5.fasta","")
#' Compute the F column
#'
#' This function gets a DNAString and gives the F column of the FM index
#'
#' @param seq the DNAString to be analysed
#' @param includeTerminationCharacter True if you want to include the ".",
#'  false if you want to exclude it. Default value:TRUE
#' @return An integer vector with all the frequences
#' in the dna sequence given in input
#' @examples
#' getFcolumn(Biostrings::DNAString("ACCT"))
#'
#' @export
#' @importFrom Biostrings DNAString
#' @importFrom Biostrings alphabetFrequency
#' @importFrom Biostrings letterFrequency
#' @importClassesFrom Biostrings DNAString
#'
getFcolumn <- function(seq,includeTerminationCharacter=TRUE){
alphabet <- names(which(
Biostrings::alphabetFrequency(seq,baseOnly=FALSE,as.prob=FALSE)!=0))
alphabet <- alphabet[alphabet!="."]
f.col <- letterFrequency(seq,alphabet)
if(includeTerminationCharacter==TRUE){
f.col <- c(1,f.col)
names(f.col)[1] <- "."
}
return(f.col)
}
#'
#' Create the i-th row of the Tally Table
#'
#' This function creates the i-th row of the Tally Table
#'
#' @param index An integer representing the index of the i-th row you want
#'  to build
#' @param l.col A DNAString object containing the L column of the FM index
#' @param alphabet A character vector containing the alphabet to consider in
#' counting the elements
#' @return the i-th row of the Tally Table
#' @importFrom Biostrings letterFrequency
#' @importClassesFrom Biostrings DNAString
#' @importFrom Biostrings DNAString
getTallyTableLine <- function(index,l.col,alphabet){
return(Biostrings::letterFrequency(l.col[seq_len(index)],alphabet))
}
#'
#' Create the Tally Table
#'
#' Creates the Tally Table of a given BWT of a string
#'
#' @param l.col A DNAString containing the L column of the FM index
#' @param rowwidth Step for saving rows of the tally table. The default
#' value is 1 which corresponds to save all the rows of the tally table
#' @return The tally table of the input sequence
#' @examples
#' getTallyTable(Biostrings::DNAString("T.AACCG"))
#' getTallyTable(Biostrings::DNAString("T.AACCG"),2)
#' @export
#' @importFrom Biostrings alphabetFrequency
getTallyTable <- function(l.col,rowwidth=1){
indexes <- as.matrix(seq(1,length(l.col),rowwidth))
alphabet <- names(which(
Biostrings::alphabetFrequency(l.col,as.prob=FALSE,baseOnly=FALSE)!=0))
alphabet <- alphabet[alphabet!="."]
return(t(apply(indexes,1,getTallyTableLine,l.col=l.col,alphabet=alphabet)))
}
#' Compute the L column of a sequence
#'
#' This function gets a character and gives the F column of the FM index
#'
#' @param sequence the DNAString to be analysed
#' @return A DNAString containing the L column of the FM index
#' @examples
#' getLcolumn(Biostrings::DNAString("ACGT"))
#' getLcolumn(Biostrings::DNAString("AACCGT"))
#' @export
#' @importFrom Biostrings DNAString
#' @importClassesFrom Biostrings DNAString
getLcolumn <- function(sequence){
seq_char <- paste(as.character(sequence),".",sep="")
indexes <- as.matrix(seq(seq_len(nchar(seq_char))))
suffix.array <- getSA(sequence)
bwt <- apply(indexes,1,getBWTcharacter,
sequence=seq_char,suffixarray=suffix.array)
results <- list(Biostrings::DNAString(paste(bwt,collapse="")),suffix.array)
names(results) <- c("bwt","suffix_array")
return(results)
}
#' Compute the suffix array of a string
#'
#' This function computes the suffix array of a given string
#'
#' @param sequence a DNAString representing the string
#' sequence
#' @return An integer array containing the suffix array
#' @examples
#' getSA(Biostrings::DNAString("ACGT"))
#' getSA(Biostrings::DNAString("AACCGT"))
#' @export
#'
getSA <- function(sequence){
seq_char <- paste(as.character(sequence),".",sep="")
indexes <- as.matrix(seq(seq_len(nchar(seq_char))))
suffixes <- apply(indexes,1,getSuffix,sequence=seq_char)
names(suffixes) <- indexes
suffix.array <- as.integer(names(sort(suffixes)))
return(suffix.array)
}
#' Get the suffix
#'
#' This function gets the suffix of the string starting from a position given
#'  in input
#'
#' @param index An integer representing the starting position of the string
#' @param sequence The sequence you want to find the suffix
#' @return The substring starting at the given position
getSuffix <- function(index,sequence){
substr(sequence,index,nchar(sequence))
}
#'
#' Compute the i-th character of the BWT
#'
#' This function computes the i-th character of the BWT of a given
#' sequence which corresponds to the i-th character in the L column.
#'
#' @param index The position which you want to find the character
#' @param sequence The string you want to know the i-th L column character
#' @param suffixarray An integer vector containing the suffix array of the
#' input string
#' @return A character containing the i-th character of the input sequence
getBWTcharacter <- function(index,sequence,suffixarray){
if(suffixarray[index]>1){
return(substr(sequence,suffixarray[index]-1,suffixarray[index]-1))
}
else{
return(".")
}
}
#'
#' Writes the FM index
#'
#' This function writes the FM index of the DNA sequence contained in the
#' .fasta file given in input
#'
#' @param fastafile The .fasta file containing one single DNA sequence,
#' files containing multiple sequences are not allowed
#' @param usrpath The directory path where the user wants to save the files:
#' it must end with '/' (you can leave it empty if you want to save the files
#' in your working directory).
#' @param tallywidth How you want to compress the tally table. Default value=1
#' @param includeEndChar default value: true
#' @return A list containint all the data structures necessary for the FM index
#' @examples
#' FMindex(system.file("extdata/examples/seq5.fasta",package="FMIndex"),"")
#' FMindex(system.file(
#' "extdata/examples/seq5.fasta",package="FMIndex"),"",tallywidth=1)
#' @export
#' @importFrom Biostrings readDNAStringSet
#' @importFrom utils write.table
FMindex <- function(fastafile,usrpath,tallywidth=1,includeEndChar=TRUE){
seqset <- Biostrings::readDNAStringSet(fastafile,use.names=FALSE)
sequence <- unlist(seqset)
f.col <- getFcolumn(unlist(sequence))
res.list <- getLcolumn(sequence)
l.col <- res.list["bwt"]
SA <- res.list["suffix_array"]
tally.table <- getTallyTable(l.col,tallywidth)
f.col.filepath <- paste(usrpath,"F_col.txt",collapse="",sep="")
l.col.filepath <- paste(usrpath,"L_col.txt",collapse="",sep="")
SA.filepath <- paste(usrpath,"suffix_array.txt",collapse="",sep="")
tally.table.filepath <- paste(usrpath,"tally_table.txt",collapse="",sep="")
FM <- list(f.col,l.col,SA,tally.table)
names(FM) <- c("F_column","L_column","suffix_array","tally_table")
write.table(t(as.matrix(f.col)), file = f.col.filepath, sep = "\t",
row.names = FALSE)
write(as.character(l.col),file=l.col.filepath)
write(SA,file=SA.filepath)
write.table(tally.table, file = tally.table.filepath,
sep = "\t", row.names = FALSE,col.names = TRUE)
return(FM)
}
FMIndex("seq5.fasta","")
#'
#' Writes the FM index
#'
#' This function writes the FM index of the DNA sequence contained in the
#' .fasta file given in input
#'
#' @param fastafile The .fasta file containing one single DNA sequence,
#' files containing multiple sequences are not allowed
#' @param usrpath The directory path where the user wants to save the files:
#' it must end with '/' (you can leave it empty if you want to save the files
#' in your working directory).
#' @param tallywidth How you want to compress the tally table. Default value=1
#' @param includeEndChar default value: true
#' @return A list containint all the data structures necessary for the FM index
#' @examples
#' FMindex(system.file("extdata/examples/seq5.fasta",package="FMIndex"),"")
#' FMindex(system.file(
#' "extdata/examples/seq5.fasta",package="FMIndex"),"",tallywidth=1)
#' @export
#' @importFrom Biostrings readDNAStringSet
#' @importFrom utils write.table
FMindex <- function(fastafile,usrpath,tallywidth=1,includeEndChar=TRUE){
seqset <- Biostrings::readDNAStringSet(fastafile,use.names=FALSE)
sequence <- unlist(seqset)
f.col <- getFcolumn(unlist(sequence))
res.list <- getLcolumn(sequence)
l.col <- res.list["bwt"]
SA <- res.list["suffix_array"]
tally.table <- getTallyTable(l.col,tallywidth)
f.col.filepath <- paste(usrpath,"F_col.txt",collapse="",sep="")
l.col.filepath <- paste(usrpath,"L_col.txt",collapse="",sep="")
SA.filepath <- paste(usrpath,"suffix_array.txt",collapse="",sep="")
tally.table.filepath <- paste(usrpath,"tally_table.txt",collapse="",sep="")
FM <- list(f.col,l.col,SA,tally.table)
names(FM) <- c("F_column","L_column","suffix_array","tally_table")
write.table(t(as.matrix(f.col)), file = f.col.filepath, sep = "\t",
row.names = FALSE)
write(as.character(l.col),file=l.col.filepath)
write(SA,file=SA.filepath)
write.table(tally.table, file = tally.table.filepath,
sep = "\t", row.names = FALSE,col.names = TRUE)
return(FM)
}
FMIndex("seq5.fasta","")
FMindex("seq5.fasta","")
#' Compute the F column
#'
#' This function gets a DNAString and gives the F column of the FM index
#'
#' @param seq the DNAString to be analysed
#' @param includeTerminationCharacter True if you want to include the ".",
#'  false if you want to exclude it. Default value:TRUE
#' @return An integer vector with all the frequences
#' in the dna sequence given in input
#' @examples
#' getFcolumn(Biostrings::DNAString("ACCT"))
#'
#' @export
#' @importFrom Biostrings DNAString
#' @importFrom Biostrings alphabetFrequency
#' @importFrom Biostrings letterFrequency
#' @importClassesFrom Biostrings DNAString
#'
getFcolumn <- function(seq,includeTerminationCharacter=TRUE){
alphabet <- names(which(
Biostrings::alphabetFrequency(seq,baseOnly=FALSE,as.prob=FALSE)!=0))
alphabet <- alphabet[alphabet!="."]
f.col <- Biostrings::letterFrequency(seq,alphabet)
if(includeTerminationCharacter==TRUE){
f.col <- c(1,f.col)
names(f.col)[1] <- "."
}
return(f.col)
}
FMindex("seq5.fasta","")
#'
#' Writes the FM index
#'
#' This function writes the FM index of the DNA sequence contained in the
#' .fasta file given in input
#'
#' @param fastafile The .fasta file containing one single DNA sequence,
#' files containing multiple sequences are not allowed
#' @param usrpath The directory path where the user wants to save the files:
#' it must end with '/' (you can leave it empty if you want to save the files
#' in your working directory).
#' @param tallywidth How you want to compress the tally table. Default value=1
#' @param includeEndChar default value: true
#' @return A list containint all the data structures necessary for the FM index
#' @examples
#' FMindex(system.file("extdata/examples/seq5.fasta",package="FMIndex"),"")
#' FMindex(system.file(
#' "extdata/examples/seq5.fasta",package="FMIndex"),"",tallywidth=1)
#' @export
#' @importFrom Biostrings readDNAStringSet
#' @importFrom utils write.table
FMindex <- function(fastafile,usrpath,tallywidth=1,includeEndChar=TRUE){
seqset <- Biostrings::readDNAStringSet(fastafile,use.names=FALSE)
sequence <- unlist(seqset)
f.col <- getFcolumn(unlist(sequence))
res.list <- getLcolumn(sequence)
l.col <- res.list["bwt"]
print(l.col)
SA <- res.list["suffix_array"]
tally.table <- getTallyTable(l.col,tallywidth)
f.col.filepath <- paste(usrpath,"F_col.txt",collapse="",sep="")
l.col.filepath <- paste(usrpath,"L_col.txt",collapse="",sep="")
SA.filepath <- paste(usrpath,"suffix_array.txt",collapse="",sep="")
tally.table.filepath <- paste(usrpath,"tally_table.txt",collapse="",sep="")
FM <- list(f.col,l.col,SA,tally.table)
names(FM) <- c("F_column","L_column","suffix_array","tally_table")
write.table(t(as.matrix(f.col)), file = f.col.filepath, sep = "\t",
row.names = FALSE)
write(as.character(l.col),file=l.col.filepath)
write(SA,file=SA.filepath)
write.table(tally.table, file = tally.table.filepath,
sep = "\t", row.names = FALSE,col.names = TRUE)
return(FM)
}
FMindex("seq5.fasta","")
#'
#' Writes the FM index
#'
#' This function writes the FM index of the DNA sequence contained in the
#' .fasta file given in input
#'
#' @param fastafile The .fasta file containing one single DNA sequence,
#' files containing multiple sequences are not allowed
#' @param usrpath The directory path where the user wants to save the files:
#' it must end with '/' (you can leave it empty if you want to save the files
#' in your working directory).
#' @param tallywidth How you want to compress the tally table. Default value=1
#' @param includeEndChar default value: true
#' @return A list containint all the data structures necessary for the FM index
#' @examples
#' FMindex(system.file("extdata/examples/seq5.fasta",package="FMIndex"),"")
#' FMindex(system.file(
#' "extdata/examples/seq5.fasta",package="FMIndex"),"",tallywidth=1)
#' @export
#' @importFrom Biostrings readDNAStringSet
#' @importFrom utils write.table
FMindex <- function(fastafile,usrpath,tallywidth=1,includeEndChar=TRUE){
seqset <- Biostrings::readDNAStringSet(fastafile,use.names=FALSE)
sequence <- unlist(seqset)
f.col <- getFcolumn(unlist(sequence))
res.list <- getLcolumn(sequence)
l.col <- unlist(res.list["bwt"])
print(l.col)
SA <- res.list["suffix_array"]
tally.table <- getTallyTable(l.col,tallywidth)
f.col.filepath <- paste(usrpath,"F_col.txt",collapse="",sep="")
l.col.filepath <- paste(usrpath,"L_col.txt",collapse="",sep="")
SA.filepath <- paste(usrpath,"suffix_array.txt",collapse="",sep="")
tally.table.filepath <- paste(usrpath,"tally_table.txt",collapse="",sep="")
FM <- list(f.col,l.col,SA,tally.table)
names(FM) <- c("F_column","L_column","suffix_array","tally_table")
write.table(t(as.matrix(f.col)), file = f.col.filepath, sep = "\t",
row.names = FALSE)
write(as.character(l.col),file=l.col.filepath)
write(SA,file=SA.filepath)
write.table(tally.table, file = tally.table.filepath,
sep = "\t", row.names = FALSE,col.names = TRUE)
return(FM)
}
FMindex("seq5.fasta","")
#'
#' Writes the FM index
#'
#' This function writes the FM index of the DNA sequence contained in the
#' .fasta file given in input
#'
#' @param fastafile The .fasta file containing one single DNA sequence,
#' files containing multiple sequences are not allowed
#' @param usrpath The directory path where the user wants to save the files:
#' it must end with '/' (you can leave it empty if you want to save the files
#' in your working directory).
#' @param tallywidth How you want to compress the tally table. Default value=1
#' @param includeEndChar default value: true
#' @return A list containint all the data structures necessary for the FM index
#' @examples
#' FMindex(system.file("extdata/examples/seq5.fasta",package="FMIndex"),"")
#' FMindex(system.file(
#' "extdata/examples/seq5.fasta",package="FMIndex"),"",tallywidth=1)
#' @export
#' @importFrom Biostrings readDNAStringSet
#' @importFrom utils write.table
FMindex <- function(fastafile,usrpath,tallywidth=1,includeEndChar=TRUE){
seqset <- Biostrings::readDNAStringSet(fastafile,use.names=FALSE)
sequence <- unlist(seqset)
f.col <- getFcolumn(unlist(sequence))
res.list <- getLcolumn(sequence)
l.col <- res.list["bwt"]
l.col <- unlist(l.col)
print(l.col)
SA <- res.list["suffix_array"]
tally.table <- getTallyTable(l.col,tallywidth)
f.col.filepath <- paste(usrpath,"F_col.txt",collapse="",sep="")
l.col.filepath <- paste(usrpath,"L_col.txt",collapse="",sep="")
SA.filepath <- paste(usrpath,"suffix_array.txt",collapse="",sep="")
tally.table.filepath <- paste(usrpath,"tally_table.txt",collapse="",sep="")
FM <- list(f.col,l.col,SA,tally.table)
names(FM) <- c("F_column","L_column","suffix_array","tally_table")
write.table(t(as.matrix(f.col)), file = f.col.filepath, sep = "\t",
row.names = FALSE)
write(as.character(l.col),file=l.col.filepath)
write(SA,file=SA.filepath)
write.table(tally.table, file = tally.table.filepath,
sep = "\t", row.names = FALSE,col.names = TRUE)
return(FM)
}
FMindex("seq5.fasta","")
#'
#' Writes the FM index
#'
#' This function writes the FM index of the DNA sequence contained in the
#' .fasta file given in input
#'
#' @param fastafile The .fasta file containing one single DNA sequence,
#' files containing multiple sequences are not allowed
#' @param usrpath The directory path where the user wants to save the files:
#' it must end with '/' (you can leave it empty if you want to save the files
#' in your working directory).
#' @param tallywidth How you want to compress the tally table. Default value=1
#' @param includeEndChar default value: true
#' @return A list containint all the data structures necessary for the FM index
#' @examples
#' FMindex(system.file("extdata/examples/seq5.fasta",package="FMIndex"),"")
#' FMindex(system.file(
#' "extdata/examples/seq5.fasta",package="FMIndex"),"",tallywidth=1)
#' @export
#' @importFrom Biostrings readDNAStringSet
#' @importFrom utils write.table
FMindex <- function(fastafile,usrpath,tallywidth=1,includeEndChar=TRUE){
seqset <- Biostrings::readDNAStringSet(fastafile,use.names=FALSE)
sequence <- unlist(seqset)
f.col <- getFcolumn(unlist(sequence))
res.list <- getLcolumn(sequence)
l.col <- res.list[["bwt"]]
l.col <- unlist(l.col)
print(l.col)
SA <- res.list[["suffix_array"]]
tally.table <- getTallyTable(l.col,tallywidth)
f.col.filepath <- paste(usrpath,"F_col.txt",collapse="",sep="")
l.col.filepath <- paste(usrpath,"L_col.txt",collapse="",sep="")
SA.filepath <- paste(usrpath,"suffix_array.txt",collapse="",sep="")
tally.table.filepath <- paste(usrpath,"tally_table.txt",collapse="",sep="")
FM <- list(f.col,l.col,SA,tally.table)
names(FM) <- c("F_column","L_column","suffix_array","tally_table")
write.table(t(as.matrix(f.col)), file = f.col.filepath, sep = "\t",
row.names = FALSE)
write(as.character(l.col),file=l.col.filepath)
write(SA,file=SA.filepath)
write.table(tally.table, file = tally.table.filepath,
sep = "\t", row.names = FALSE,col.names = TRUE)
return(FM)
}
FMindex("seq5.fasta","")
